************* Module undatum.constants
undatum\constants.py:1:16: W8301: Use tuple instead of list for a non-mutated sequence (use-tuple-over-list)
undatum\constants.py:8:23: W8301: Use tuple instead of list for a non-mutated sequence (use-tuple-over-list)
************* Module undatum.utils
undatum\utils.py:45:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:45:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:58:29: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\utils.py:58:55: W8205: Importing the "OPT_APPEND_NEWLINE" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\utils.py:57:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:57:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:62:29: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\utils.py:62:55: W8205: Importing the "OPT_APPEND_NEWLINE" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\utils.py:65:29: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\utils.py:65:55: W8205: Importing the "OPT_APPEND_NEWLINE" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\utils.py:79:25: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:80:33: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:79:25: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:80:33: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:78:12: W8401: Use a list comprehension instead of a for-loop (use-list-comprehension)
undatum\utils.py:88:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:89:48: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:89:58: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:88:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:89:48: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:89:58: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:96:4: W8401: Use a list comprehension instead of a for-loop (use-list-comprehension)
undatum\utils.py:106:65: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:106:65: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:122:47: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:122:47: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:128:51: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:128:51: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:189:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\utils.py:189:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
************* Module undatum.cmds.analyzer
undatum\cmds\analyzer.py:78:13: W8205: Importing the "decode_file_iter" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\analyzer.py:136:34: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:136:34: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:149:26: W8301: Use tuple instead of list for a non-mutated sequence (use-tuple-over-list)
undatum\cmds\analyzer.py:168:42: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:172:41: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:172:52: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:168:42: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:172:41: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:172:52: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:185:42: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:189:41: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:189:52: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:185:42: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:189:41: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:189:52: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\analyzer.py:279:22: W8301: Use tuple instead of list for a non-mutated sequence (use-tuple-over-list)
************* Module undatum.cmds.converter
undatum\cmds\converter.py:59:23: W8205: Importing the "iterparse" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:67:23: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:68:23: W8202: Lookups of global names within a loop is inefficient, copy to a local variable outside of the loop first. (loop-invariant-global-usage)
undatum\cmds\converter.py:70:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:61:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\converter.py:63:15: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\converter.py:61:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\converter.py:63:15: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\converter.py:94:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:106:14: W8205: Importing the "encode" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:106:14: W8205: Importing the "BSON" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:109:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:122:21: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:126:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:124:21: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\converter.py:124:21: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\converter.py:141:8: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\cmds\converter.py:146:12: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:147:25: W8202: Lookups of global names within a loop is inefficient, copy to a local variable outside of the loop first. (loop-invariant-global-usage)
undatum\cmds\converter.py:150:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:164:8: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\cmds\converter.py:166:12: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:168:21: W8202: Lookups of global names within a loop is inefficient, copy to a local variable outside of the loop first. (loop-invariant-global-usage)
undatum\cmds\converter.py:170:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:166:34: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\converter.py:166:34: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\converter.py:184:8: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\cmds\converter.py:186:21: W8205: Importing the "encode" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:186:21: W8205: Importing the "BSON" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:188:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:186:47: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\converter.py:186:47: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\converter.py:208:17: W8205: Importing the "loads" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:237:17: W8205: Importing the "loads" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:246:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:257:13: W8205: Importing the "decode_file_iter" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:259:21: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\converter.py:259:39: W8202: Lookups of global names within a loop is inefficient, copy to a local variable outside of the loop first. (loop-invariant-global-usage)
undatum\cmds\converter.py:261:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
************* Module undatum.cmds.selector
undatum\cmds\selector.py:25:12: W8205: Importing the "debug" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:26:8: R8203: Try..except blocks have an overhead. Avoid using them inside a loop unless you're using them for control-flow. (loop-try-except-usage)
undatum\cmds\selector.py:28:12: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\cmds\selector.py:33:16: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\cmds\selector.py:48:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:52:8: R8203: Try..except blocks have an overhead. Avoid using them inside a loop unless you're using them for control-flow. (loop-try-except-usage)
undatum\cmds\selector.py:54:12: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\cmds\selector.py:59:16: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\cmds\selector.py:49:11: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:187:26: W8205: Importing the "match" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:193:20: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:186:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:187:38: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:186:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:186:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:187:38: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:250:24: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:252:31: W8205: Importing the "match" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:260:33: W8205: Importing the "DictWriter" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:251:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:252:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:255:27: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:251:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:251:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:252:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:255:27: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:273:24: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:274:24: W8205: Importing the "loads" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:276:31: W8205: Importing the "match" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:278:30: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:278:53: W8205: Importing the "OPT_APPEND_NEWLINE" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:283:24: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:275:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:276:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:279:27: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:275:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:275:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:276:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:279:27: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:289:24: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:290:24: W8205: Importing the "loads" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:292:31: W8205: Importing the "match" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\selector.py:294:20: R8203: Try..except blocks have an overhead. Avoid using them inside a loop unless you're using them for control-flow. (loop-try-except-usage)
undatum\cmds\selector.py:291:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:292:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:295:47: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:291:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:291:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:292:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:295:47: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:295:47: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\selector.py:318:20: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
************* Module undatum.cmds.statistics
undatum\cmds\statistics.py:62:32: W8205: Importing the "loads" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\statistics.py:61:12: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\cmds\statistics.py:66:12: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\cmds\statistics.py:70:12: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\cmds\statistics.py:78:34: W8205: Importing the "debug" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\statistics.py:160:18: W8301: Use tuple instead of list for a non-mutated sequence (use-tuple-over-list)
undatum\cmds\statistics.py:11:26: W8301: Use tuple instead of list for a non-mutated sequence (use-tuple-over-list)
************* Module undatum.cmds.textproc
undatum\cmds\textproc.py:14:12: W8403: Use a dictionary comprehension instead of a for-loop (use-dict-comprehension)
undatum\cmds\textproc.py:19:20: W8403: Use a dictionary comprehension instead of a for-loop (use-dict-comprehension)
undatum\cmds\textproc.py:40:22: W8205: Importing the "loads" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\textproc.py:47:23: W8205: Importing the "decode_file_iter" name directly is more efficient in this loop. (dotted-import-in-loop)
************* Module undatum.cmds.transformer
undatum\cmds\transformer.py:64:20: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\transformer.py:69:30: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\transformer.py:69:56: W8205: Importing the "OPT_APPEND_NEWLINE" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\transformer.py:66:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\transformer.py:68:21: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\transformer.py:66:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\transformer.py:68:21: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\transformer.py:75:20: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\transformer.py:76:20: W8205: Importing the "loads" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\transformer.py:78:26: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\transformer.py:78:52: W8205: Importing the "OPT_APPEND_NEWLINE" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\transformer.py:85:20: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\transformer.py:87:30: W8205: Importing the "dumps" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\transformer.py:87:56: W8205: Importing the "OPT_APPEND_NEWLINE" name directly is more efficient in this loop. (dotted-import-in-loop)
************* Module undatum.cmds.validator
undatum\cmds\validator.py:59:20: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\validator.py:61:27: W8205: Importing the "match" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\validator.py:60:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:61:39: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:63:33: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:64:16: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:66:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:67:34: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:67:48: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:67:60: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:60:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:60:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:61:39: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:63:33: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:64:16: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:64:16: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:66:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:66:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:67:34: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:67:48: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:67:60: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:67:60: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:74:20: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\validator.py:75:20: W8205: Importing the "loads" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\validator.py:77:27: W8205: Importing the "match" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\validator.py:76:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:77:39: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:79:16: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:80:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:84:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:85:38: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:85:61: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:87:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:76:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:76:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:77:39: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:79:16: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:79:16: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:80:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:80:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:84:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:84:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:85:38: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:85:61: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:85:61: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:87:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:87:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:96:20: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\validator.py:98:27: W8205: Importing the "match" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\cmds\validator.py:97:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:98:39: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:100:16: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:101:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:105:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:106:38: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:106:61: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:108:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:97:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:97:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:98:39: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:100:16: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:100:16: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:101:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:101:43: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:105:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:105:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:106:38: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:106:61: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:106:61: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:108:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:108:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:118:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:119:31: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:121:21: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:118:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:118:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:119:31: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:119:31: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:121:21: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:121:21: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\cmds\validator.py:90:22: W8301: Use tuple instead of list for a non-mutated sequence (use-tuple-over-list)
************* Module undatum.common.functions
undatum\common\functions.py:25:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\functions.py:26:40: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\functions.py:25:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\functions.py:26:40: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\functions.py:24:16: W8401: Use a list comprehension instead of a for-loop (use-list-comprehension)
undatum\common\functions.py:40:48: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\functions.py:40:48: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
************* Module undatum.common.iterable
undatum\common\iterable.py:109:28: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\iterable.py:121:28: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
************* Module undatum.common.scheme
undatum\common\scheme.py:33:35: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:33:35: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:33:35: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:33:35: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:58:4: W8402: Use a list copy instead of a for-loop (use-list-copy)
undatum\common\scheme.py:73:19: W8205: Importing the "datetime" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:81:19: W8205: Importing the "Int64" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:81:19: W8205: Importing the "Int64" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:81:19: W8205: Importing the "int64" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:83:19: W8205: Importing the "ObjectId" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:83:19: W8205: Importing the "ObjectId" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:83:19: W8205: Importing the "objectid" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:93:36: W8202: Lookups of global names within a loop is inefficient, copy to a local variable outside of the loop first. (loop-invariant-global-usage)
undatum\common\scheme.py:94:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:94:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:95:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:95:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:94:23: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:95:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:102:24: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:104:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:68:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:68:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:68:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:68:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:69:19: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:69:37: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:70:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:70:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:70:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:70:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:72:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:72:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:72:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:72:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:74:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:74:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:74:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:74:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:76:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:76:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:76:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:76:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:78:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:78:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:78:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:78:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:80:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:80:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:80:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:80:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:82:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:82:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:82:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:82:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:84:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:84:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:84:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:84:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:88:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:88:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:88:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:88:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:105:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:105:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:105:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:105:24: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:131:12: W8205: Importing the "info" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:118:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:119:50: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:120:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:122:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:126:56: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:128:28: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:129:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:132:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:118:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:119:50: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:120:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:120:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:122:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:126:56: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:128:28: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:129:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:129:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:132:20: W8201: Consider moving this expression outside of the loop. (loop-invariant-statement)
undatum\common\scheme.py:112:11: W8301: Use tuple instead of list for a non-mutated sequence (use-tuple-over-list)
undatum\common\scheme.py:155:17: W8205: Importing the "decode_file_iter" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:172:29: W8205: Importing the "loads" name directly is more efficient in this loop. (dotted-import-in-loop)
undatum\common\scheme.py:207:8: R8203: Try..except blocks have an overhead. Avoid using them inside a loop unless you're using them for control-flow. (loop-try-except-usage)
undatum\common\scheme.py:9:13: W8301: Use tuple instead of list for a non-mutated sequence (use-tuple-over-list)
************* Module undatum.validate.ruscodes
undatum\validate\ruscodes.py:122:39: W8202: Lookups of global names within a loop is inefficient, copy to a local variable outside of the loop first. (loop-invariant-global-usage)
undatum\validate\ruscodes.py:105:19: W8301: Use tuple instead of list for a non-mutated sequence (use-tuple-over-list)

------------------------------------------------------------------
Your code has been rated at 8.26/10 (previous run: 8.26/10, +0.00)

